{
  "info": {
    "_postman_id": "f43829ef-87a7-430e-9968-e58eebb0d900",
    "name": "My \"Explore with me\" Feature comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27049728"
  },
  "item": [
    {
      "name": "Comments",
      "item": [
        {
          "name": "Private",
          "item": [
            {
              "name": "Добавление комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = JSON.parse(pm.request.body.raw);\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('text');\r",
                      "pm.expect(target).to.have.property('author');\r",
                      "pm.expect(target).to.have.property('createDate');\r",
                      "pm.expect(target).to.have.property('event');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(rnd.getComment()),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария от несуществующего пользователя",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", 999)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(rnd.getComment()),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария к несуществующему событию",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", 999)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(rnd.getComment()),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария с text = null",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const comment = rnd.getComment()\r",
                      "        comment.text = null\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(comment),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария с text = blank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const comment = rnd.getComment()\r",
                      "        comment.text = \"         \"\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(comment),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария с text < 5",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const comment = rnd.getComment()\r",
                      "        comment.text = \"text\"\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(comment),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление комментария с text > 1000",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const comment = rnd.getComment()\r",
                      "        comment.text = rnd.getWord(1001)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(comment),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    "events",
                    ":eventId",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария автором",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = JSON.parse(pm.request.body.raw);\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('text');\r",
                      "pm.expect(target).to.have.property('author');\r",
                      "pm.expect(target).to.have.property('createDate');\r",
                      "pm.expect(target).to.have.property('event');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария не автором",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const userOwner = await api.addUser(rnd.getUser());\r",
                      "        const userRequest = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", userRequest.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            userRequest.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            userOwner.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария с text = null",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        commentBody.text = null\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария с text = blank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        commentBody.text = '      '\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария с text < 5",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        commentBody.text = rnd.getWord(4)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария с text > 1000",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        commentBody.text = rnd.getWord(1001)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление несуществующего комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        pm.collectionVariables.set(\"commentId\", 999)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Обновление комментария несуществующим пользователем",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", 999)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение комментария по id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('text');\r",
                      "pm.expect(target).to.have.property('author');\r",
                      "pm.expect(target).to.have.property('createDate');\r",
                      "pm.expect(target).to.have.property('event');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение несуществующего комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        pm.collectionVariables.set(\"commentId\", 999)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение комментария по id от несуществующего пользователя",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", 999)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение списка всех комментариев пользователя",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Ответ должен содержать комментарии\", function() {\r",
                      "    pm.expect(target.length).equals(1)\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
                      "pm.expect(target[0]).to.have.property('id');\r",
                      "pm.expect(target[0]).to.have.property('text');\r",
                      "pm.expect(target[0]).to.have.property('author');\r",
                      "pm.expect(target[0]).to.have.property('createDate');\r",
                      "pm.expect(target[0]).to.have.property('event');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение списка комментариев от несуществующего пользователя",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", 999)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ""
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Удаление комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 или 204\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Удаление несуществующего комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        pm.collectionVariables.set(\"commentId\", 999)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Удаление чужого комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const userOwner = await api.addUser(rnd.getUser());\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            userOwner.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{userId}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Public",
          "item": [
            {
              "name": "Получение всех комментариев о событии",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Должен быть список из одного коммента\", function () {\r",
                      "    pm.expect(target.length).equal(10, \"Список должен содержать 10 элементов\");\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, author, createDate, event\", function () {\r",
                      "pm.expect(target[0]).to.have.property('id');\r",
                      "pm.expect(target[0]).to.have.property('text');\r",
                      "pm.expect(target[0]).to.have.property('author');\r",
                      "pm.expect(target[0]).to.have.property('createDate');\r",
                      "pm.expect(target[0]).to.have.property('event');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const userOwner = await api.addUser(rnd.getUser());\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        for (let i = 0; i < 10; i++) {\r",
                      "            await api.addComment(\r",
                      "                        userOwner.id,\r",
                      "                        event.id,\r",
                      "                        rnd.getComment()\r",
                      "            )\r",
                      "        }\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение всех комментариев о событии без комментариев",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Должен быть пустой список\", function () {\r",
                      "    pm.expect(target.length).equal(0, \"Список должен быть пустым\");\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const userOwner = await api.addUser(rnd.getUser());\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Получение всех комментариев о несуществующем событии",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        pm.collectionVariables.set(\"eventId\", 999)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eventId}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Admin",
          "item": [
            {
              "name": "Обновление комментария администратором",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = JSON.parse(pm.request.body.raw);\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('text');\r",
                      "pm.expect(target).to.have.property('author');\r",
                      "pm.expect(target).to.have.property('createDate');\r",
                      "pm.expect(target).to.have.property('event');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        pm.collectionVariables.set(\"eventId\", event.id)\r",
                      "        const commentBody = rnd.getComment()\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            commentBody\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "        pm.request.body.update({\r",
                      "                mode: 'raw',\r",
                      "                raw: JSON.stringify(commentBody),\r",
                      "                options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Удаление комментария администратором",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 или 204\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "       const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"userId\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory())\r",
                      "        const event = await api.addEvent(\r",
                      "            user.id,\r",
                      "            rnd.getEvent(category.id)\r",
                      "        );\r",
                      "        const comment = await api.addComment(\r",
                      "            user.id,\r",
                      "            event.id,\r",
                      "            rnd.getComment()\r",
                      "        )\r",
                      "        pm.collectionVariables.set(\"commentId\", comment.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Удаление несущестующего комментария администратором",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        pm.collectionVariables.set(\"commentId\", 999)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "commentId",
                      "value": "{{commentId}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/comments/events/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async findComment(userId, commentId, verbose=null) {",
          "        return this.get('/users/' + userId + \"/comments/\" + commentId, null, \"Ошибка при поиске комментария по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getComment() {",
          "        return {",
          "            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "default"
    },
    {
      "key": "commentId",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    }
  ]
}